https://en.wikipedia.org/wiki/C%2B%2B
C++ is a general-purpose programming language created by Danish computer scientist Bjarne Stroustrup as an extension of the C programming language, or "C with Classes". The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.
C++ was designed with an orientation toward systems programming and embedded, resource-constrained software and large systems, with performance, efficiency, and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, video games, servers (e.g. e-commerce, web search, or databases), and performance-critical applications (e.g. telephone switches or space probes).
C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2020 as ISO/IEC 14882:2020 (informally known as C++20). The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11, C++14, and C++17 standards. The current C++20 standard supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization. Since 2012, C++ has been on a three-year release schedule with C++23 as the next planned standard.
https://www.codeguru.com/cplusplus/an-introduction-to-ordered-associative-containers-in-c/
Associative containers are those that provide direct access to its elements for storage and retrieval purposes. The elements are accessed via keys, also known as search keys. There are four ordered and four unordered associative containers in C++ such as multiset, set, multimap, map and unordered_multiset, unordered_set, unordered_multimap, and unordered_map, respectively. This article focuses on the ordered associative containers and explains them with examples.
The C++ Standard Library defines a host of different types of powerful containers. These containers are nothing but a template-based version of different storage data structures. There also are other implementations, such as template-based implementation of algorithms and iterators in the Standard Library. But, the containers are specifically for storing objects. To make the container generic, it has to have been templatized. This provides the container the capability to store objects of almost any data type.
According to the style of operation, C++ container classes can be loosely categorized as sequence containers, associative containers, and container adapters. The difference lies in how each of them adapts the data structure. For example, the sequence container adapts the linear data structure, the associative container stores a value a key-value pair, and container adapters are basically sequence containers with some constraints.
All containers are equipped with a list of member functions and most of them share a subset of similar prototype of these functions. This poses great advantage for the programmer to quickly discern the meaning implied by the function name and understand immediately how to use them even if the type of container changes. Here, we focus on the associative container and only ordered ones.
In the C++ Standard Library, there are four ordered associative containers and four unordered associative containers. The four ordered associative containers are multiset, set, multimap, and map. The four unordered associative containers are unordered_multiset, unordered_set, unordered_multimap, and unordered_map, respectively.
Note that the meanings implied by containers are same except one is strict about maintaining order among the objects stored whereas another one is not. This means that ordered ones store the keys in a sorted order, but the unordered ones have no such order. That’s all the difference. Here, we’ll take up only the ordered associative container and discuss it with examples.
The set associative containers store values in such a way that the storage and retrieval of the container object is fast. The idea of “set” is derived from the mathematical set theory which does not allow duplicate elements. The elements stored in the set associative container must be unique. Any attempt to insert a duplicate element in the set is ignored according to the mathematical behavior of the set. It supports bidirectional iterators but does not support random access iterators. If we consider that the order of the objects in the set is not required, we can simply use its unordered version, called unordered_set. Otherwise, both ordered set and unordered_set are same in their functionality.
Multiset is a type of associative container which is similar to set but allows duplicate keys. As with set, the ordering of the elements is determined by the comparator function object. The comparator function object, such as less<int>, determines that the elements would be sorted in ascending order. Use greater<int> to sort elements in descending order. However, the objects stored in the associative container must support comparison according to the comparator function. Any custom data type stored in the ordered associative container must have an appropriate comparison operator. Like set, it also supports bidirectional iterators but not random-access iterators. The unordered counterpart of multiset is called unordered_multiset.
The map associative container stores elements as key-value pairs. It uses unique keys to perform fast storage and retrieval of its associated values. With a single value associated with each unique key, it does not allow duplicates. There is one-to-one mapping of key-value pairs. We easily can specify the key to retrieve its associated value quickly. Elements can be inserted and removed from anywhere in the map. If we do not want the constraint of ordering the keys, we can use its unordered version, called the unordered_map.
Similar to the map, the multimap associative container is also an associative container. The elements of multimap also are stored in key-value pairs. The key elements are ordered according to the comparator function object. The main difference between map and multimap is that multimap allows duplicate keys to be stored in the container. The relationship between key-value pairs, therefore, is of one-to-many. If we do not want the constraint of ordering the keys, we can use its unordered version called the unordered_multimap.
Associative containers, such as set, multiset, map, and multimap are an implementation of non-linear data structure. Each of them has ordered and unordered versions. The ordering of the elements is based upon a comparator function object. There are many common functions among them. They are a time tested, robust, and efficient data structure implementation. They also are highly intuitive and very easy to use in everyday C++ programming.
emokymai.vu.lt/